"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[9081],{4155:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"tutorial-extras/cleanup","title":"Test Clean Ups","description":"TUnit supports having your test class implement IDisposable or IAsyncDisposable. These will be called after your test has finished executing. However, using the attributes below offers better support for running multiple methods, and without having to implement your own try/catch logic. Every [After] method will be run, and any exceptions will be lazily thrown afterwards.","source":"@site/docs/tutorial-extras/cleanup.md","sourceDirName":"tutorial-extras","slug":"/tutorial-extras/cleanup","permalink":"/TUnit/docs/tutorial-extras/cleanup","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Test Set Ups","permalink":"/TUnit/docs/tutorial-extras/setup"},"next":{"title":"Retrying","permalink":"/TUnit/docs/tutorial-extras/retrying"}}');var r=s(4848),i=s(8453);const a={sidebar_position:2},l="Test Clean Ups",o={},c=[];function d(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"test-clean-ups",children:"Test Clean Ups"})}),"\n",(0,r.jsxs)(t.p,{children:["TUnit supports having your test class implement ",(0,r.jsx)(t.code,{children:"IDisposable"})," or ",(0,r.jsx)(t.code,{children:"IAsyncDisposable"}),". These will be called after your test has finished executing. However, using the attributes below offers better support for running multiple methods, and without having to implement your own try/catch logic. Every ",(0,r.jsx)(t.code,{children:"[After]"})," method will be run, and any exceptions will be lazily thrown afterwards."]}),"\n",(0,r.jsxs)(t.p,{children:["You can also declare a method with an ",(0,r.jsx)(t.code,{children:"[After(...)]"})," or an ",(0,r.jsx)(t.code,{children:"[AfterEvery(...)]"})," attribute."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"[After(Test)]"})," methods should NOT be static, and they will be executed repeatedly after each test in their class ends."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"[After(Class)]"})," methods SHOULD be static, and they will be executed only once, after all tests in their class end."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"[After(Assembly)]"})," methods SHOULD be static, and they will be executed only once, after all tests in their assembly end."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["All ",(0,r.jsx)(t.code,{children:"[AfterEvery(...)]"})," methods SHOULD be static, and they will follow the same behaviour as above, but fire for every test/class/assembly that is being run in the test session."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Methods will be executed top-down, so the current class clean ups will execute first, then the base classes' last."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    private int _value;\n    private static HttpResponseMessage? _pingResponse;\n\n    [After(Class)]\n    public static async Task KillChromedrivers()\n    {\n        await Task.CompletedTask;\n\n        foreach (var process in Process.GetProcessesByName("chromedriver.exe"))\n        {\n            process.Kill();\n        }\n    }\n    \n    [After(Test)]\n    public async Task AfterEachTest()\n    {\n        await new HttpClient().GetAsync($"https://localhost/test-finished-notifier?testName={TestContext.Current.TestInformation.TestName}");\n    }\n\n    [Test]\n    public async Task MyTest()\n    {\n        // Do something\n    }\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>l});var n=s(6540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);